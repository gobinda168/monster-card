{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","monster","name","id","email","className","src","alt","CardList","monsters","map","key","SearchBox","handleSearch","type","placeholder","onChange","e","App","useState","setMonsters","search","setSearch","useEffect","a","async","get","data","fetchData","filterList","filter","toLowerCase","includes","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6UAEaA,G,YAAO,SAAC,GAAsC,IAAD,IAAnCC,QAAWC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,MAC1C,OACE,yBAAKC,UAAU,kBACb,yBAAKC,IAAG,+BAA0BH,EAA1B,aAAyCI,IAAKL,IACtD,4BAAKA,GACL,2BAAIE,EAAJ,QCJOI,EAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACzB,OACE,yBAAKJ,UAAU,aACZI,EAASC,KAAI,SAACT,GAAD,OACZ,kBAAC,EAAD,CAAMU,IAAKV,EAAQE,GAAIF,QAASA,SCL3BW,G,MAAY,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAC1B,OACE,yBAAKR,UAAU,aACb,2BACES,KAAK,SACLZ,KAAK,SACLC,GAAG,SACHE,UAAU,SACVU,YAAY,iBACZC,SAAU,SAAAC,GAAC,OAAIJ,EAAaI,SCyBrBC,MA7Bf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNV,EADM,KACIW,EADJ,OAEeD,mBAAS,IAFxB,mBAENE,EAFM,KAEEC,EAFF,KAKbC,qBAAU,YACU,qBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACOE,cAAI,+CADX,gBACRC,EADQ,EACRA,KACRP,EAAYO,GAFI,qCAIlBC,KACC,IACH,IAIMC,EAAapB,EAASqB,QAAO,SAAA7B,GAAO,OACxCA,EAAQC,KAAK6B,cAAcC,SAASX,EAAOU,kBAG7C,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,CAAWQ,aAVM,SAAAI,GACnBK,EAAUL,EAAEgB,OAAOC,UAUjB,+CACA,kBAAC,EAAD,CAAUzB,SAAUoB,MCnBNM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.77c10584.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.style.css\";\r\nexport const Card = ({ monster: { name, id, email } }) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img src={`https://robohash.org/${id}?set=set2`} alt={name} />\r\n      <h2>{name}</h2>\r\n      <p>{email} </p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./card-list.style.css\";\r\nimport { Card } from \"../card/card.component\";\r\nexport const CardList = ({ monsters }) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {monsters.map((monster) => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./search-box.style.css\";\r\nexport const SearchBox = ({ handleSearch }) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <input\r\n        type=\"search\"\r\n        name=\"search\"\r\n        id=\"search\"\r\n        className=\"search\"\r\n        placeholder=\"Search Monster\"\r\n        onChange={e => handleSearch(e)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\n// import logo from './logo.svg';\nimport \"./App.css\";\nimport { get } from \"axios\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nfunction App() {\n  const [monsters, setMonsters] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  // const [filteredList, setFilteredList] = useState(\" \");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data } = await get(\"https://jsonplaceholder.typicode.com/users\");\n      setMonsters(data);\n    };\n    fetchData();\n  }, []);\n  const handleSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const filterList = monsters.filter(monster =>\n    monster.name.toLowerCase().includes(search.toLowerCase())\n  );\n\n  return (\n    <div className=\"App\">\n      <SearchBox handleSearch={handleSearch} />\n      <h1>Monster Rolodex</h1>\n      <CardList monsters={filterList} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}